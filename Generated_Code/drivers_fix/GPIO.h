/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : GPIO.h
**     Project     : kpb64_test
**     Processor   : SKEAZ64MLH4
**     Component   : GPIO_LDD
**     Version     : Component 01.128, Driver 01.08, CPU db: 3.00.000
**     Repository  : Kinetis
**     Compiler    : GNU C Compiler
**     Date/Time   : 2023-02-07, 11:45, # CodeGen: 55
**     Abstract    :
**         The HAL GPIO component will provide a low level API for unified
**         access to general purpose digital input/output pins across
**         various device designs.
**
**         RTOS drivers using HAL GPIO API will be simpler and more
**         portable to various microprocessors.
**     Settings    :
**          Component name                                 : GPIO
**          Port                                           : GPIOA
**          Port width                                     : 32 bits
**          Mask of allocated pins                         : 0x0
**          Interrupt service/event                        : Disabled
**          Bit fields                                     : 0
**          Initialization                                 : 
**            Auto initialization                          : no
**            Event mask                                   : 
**              OnPortEvent                                : Disabled
**     Contents    :
**         Init                   - LDD_TDeviceData* GPIO_Init(LDD_TUserData *UserDataPtr);
**         Deinit                 - void GPIO_Deinit(LDD_TDeviceData *DeviceDataPtr);
**         SetPortValue           - void GPIO_SetPortValue(LDD_TDeviceData *DeviceDataPtr, GPIO_TPortValue Value);
**         GetPortValue           - GPIO_TPortValue GPIO_GetPortValue(LDD_TDeviceData *DeviceDataPtr);
**         ClearPortBits          - void GPIO_ClearPortBits(LDD_TDeviceData *DeviceDataPtr, GPIO_TPortValue Mask);
**         SetPortBits            - void GPIO_SetPortBits(LDD_TDeviceData *DeviceDataPtr, GPIO_TPortValue Mask);
**         TogglePortBits         - void GPIO_TogglePortBits(LDD_TDeviceData *DeviceDataPtr, GPIO_TPortValue Mask);
**         SetPortInputDirection  - void GPIO_SetPortInputDirection(LDD_TDeviceData *DeviceDataPtr,...
**         SetPortOutputDirection - void GPIO_SetPortOutputDirection(LDD_TDeviceData *DeviceDataPtr,...
**
**     Copyright : 1997 - 2015 Freescale Semiconductor, Inc. 
**     All Rights Reserved.
**     
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**     
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**     
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**     
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**     
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**     
**     http: www.freescale.com
**     mail: support@freescale.com
** ###################################################################*/
/*!
** @file GPIO.h
** @version 01.08
** @brief
**         The HAL GPIO component will provide a low level API for unified
**         access to general purpose digital input/output pins across
**         various device designs.
**
**         RTOS drivers using HAL GPIO API will be simpler and more
**         portable to various microprocessors.
*/         
/*!
**  @addtogroup GPIO_module GPIO module documentation
**  @{
*/         

#ifndef __GPIO_H
#define __GPIO_H

/* MODULE GPIO. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "IO_Map.h"
#include "GPIO_PDD.h"
#include "PORT_PDD.h"

#include "Cpu.h"

#ifdef __cplusplus
extern "C" {
#endif 


/*! Peripheral base address of a device allocated by the component. This constant can be used directly in PDD macros. */
#define GPIO_PRPH_BASE_ADDRESS  0x400FF000U
  
/* Methods configuration constants - generated for all enabled component's methods */
#define GPIO_Init_METHOD_ENABLED       /*!< Init method of the component GPIO is enabled (generated) */
#define GPIO_Deinit_METHOD_ENABLED     /*!< Deinit method of the component GPIO is enabled (generated) */
#define GPIO_SetPortValue_METHOD_ENABLED /*!< SetPortValue method of the component GPIO is enabled (generated) */
#define GPIO_GetPortValue_METHOD_ENABLED /*!< GetPortValue method of the component GPIO is enabled (generated) */
#define GPIO_ClearPortBits_METHOD_ENABLED /*!< ClearPortBits method of the component GPIO is enabled (generated) */
#define GPIO_SetPortBits_METHOD_ENABLED /*!< SetPortBits method of the component GPIO is enabled (generated) */
#define GPIO_TogglePortBits_METHOD_ENABLED /*!< TogglePortBits method of the component GPIO is enabled (generated) */
#define GPIO_SetPortInputDirection_METHOD_ENABLED /*!< SetPortInputDirection method of the component GPIO is enabled (generated) */
#define GPIO_SetPortOutputDirection_METHOD_ENABLED /*!< SetPortOutputDirection method of the component GPIO is enabled (generated) */

/* Events configuration constants - generated for all enabled component's events */

/* Definition of bit field constants */

/* Definition of implementation constants */
typedef enum{
    GPIOA_BASE_TYPE = 0,
    GPIOB_BASE_TYPE,
    GPIOC_BASE_TYPE,
    GPIO_MAX_TYPE
} GPIO_BASE_Type;

#define GPIO_ALLOCATED_PINS_MASK 0xFFFFFFFFU /*!< Mask of all allocated pins from the port */
#define GPIO_PORTCONTROL_BASE_ADDRESS PORT_BASE_PTR /*!< Name of macro used as the base address */
#define GPIO_AVAILABLE_EVENTS_MASK 0x00U /*!< Mask of all available events */
/* Representation of unaligned data value of the port.
   Unsigned integer of proper width depending on the size of the GPIO port allocated.
   Typically the value of n-th bit represents the data for the n-th pin within the port.
   Such value is not abstracted from the physical position of the bits within the port. */
typedef uint32_t GPIO_TPortValue;

/* Representation of right-aligned data value of the bit field.
   Typically the value of n-th bit represents the data of the n-th bit within the bit field (not within the port).
   There are used only so many lowest bits, as it is denoted by the width of the bit field.
   Such value is abstracted from the physical position of the bit field pins within the port.
   Equals to the type <compId>_TPortValue. */
typedef GPIO_TPortValue GPIO_TFieldValue;



/*
** ===================================================================
**     Method      :  GPIO_Init (component GPIO_LDD)
*/
/*!
**     @brief
**         This method initializes the associated peripheral(s) and the
**         component internal variables. The method is called
**         automatically as a part of the application initialization
**         code.
**     @param
**         UserDataPtr     - Pointer to the RTOS device
**                           structure. This pointer will be passed to
**                           all events as parameter.
**     @return
**                         - Pointer to the dynamically allocated private
**                           structure or NULL if there was an error.
*/
/* ===================================================================*/
LDD_TDeviceData* GPIO_Init(LDD_TUserData *UserDataPtr);

/*
** ===================================================================
**     Method      :  GPIO_Deinit (component GPIO_LDD)
*/
/*!
**     @brief
**         This method disables the device and frees the device data
**         structure memory.
**     @param
**         DeviceDataPtr   - Pointer to device data
**                           structure pointer.
*/
/* ===================================================================*/
void GPIO_Deinit(LDD_TDeviceData *DeviceDataPtr);

/*
** ===================================================================
**     Method      :  GPIO_SetPortValue (component GPIO_LDD)
*/
/*!
**     @brief
**         This method writes the output data value to the port. Only
**         configured pins (through all of bit fields in this component)
**         are affected.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         GpioType        - GPIO type
**                           ex:GPIOA type,GPIOB type
**     @param
**         Value           - Unaligned data value to write to the
**                           port. The bit 0 corresponds with the pin
**                           which has index 0 within the port, the bit
**                           1 corresponds with the pin which has index
**                           1 within the port, etc. Only configured
**                           pins (through all of bit fields in this
**                           component) are affected.
*/
/* ===================================================================*/
void GPIO_SetPortValue(LDD_TDeviceData *DeviceDataPtr, GPIO_BASE_Type GpioType, GPIO_TPortValue Value);

/*
** ===================================================================
**     Method      :  GPIO_GetPortInputValue (component GPIO_LDD)
*/
/*!
**     @brief
**         This method returns the current port input data value. Only
**         configured pins (through all of bit fields in this component)
**         are returned.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         GpioType        - GPIO type
**                           ex:GPIOA type,GPIOB type
**     @return
**                         - Unaligned current port input data value
**                           masked for allocated pins of the port. The
**                           bit 0 corresponds with the pin which has
**                           index 0 within the port, the bit 1
**                           corresponds with the pin which has index 1
**                           within the port, etc. Only configured pins
**                           (through all of bit fields in this
**                           component) are returned. The others are
**                           zeros.
*/
/* ===================================================================*/
GPIO_TPortValue GPIO_GetPortInputValue(LDD_TDeviceData *DeviceDataPtr, GPIO_BASE_Type GpioType);

/*
** ===================================================================
**     Method      :  GPIO_GetPortOutputValue (component GPIO_LDD)
*/
/*!
**     @brief
**         This method returns the current port output data value. Only
**         configured pins (through all of bit fields in this component)
**         are returned.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         GpioType        - GPIO type
**                           ex:GPIOA type,GPIOB type
**     @return
**                         - Unaligned current port output data value
**                           masked for allocated pins of the port. The
**                           bit 0 corresponds with the pin which has
**                           index 0 within the port, the bit 1
**                           corresponds with the pin which has index 1
**                           within the port, etc. Only configured pins
**                           (through all of bit fields in this
**                           component) are returned. The others are
**                           zeros.
*/
/* ===================================================================*/
GPIO_TPortValue GPIO_GetPortOutputValue(LDD_TDeviceData *DeviceDataPtr, GPIO_BASE_Type GpioType);
/*
** ===================================================================
**     Method      :  GPIO_ClearPortBits (component GPIO_LDD)
*/
/*!
**     @brief
**         This method drives the specified bits of the port to the
**         inactive level. Only configured pins (through all of bit
**         fields in this component) are affected.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         GpioType        - GPIO type
**                           ex:GPIOA type,GPIOB type
**     @param
**         Mask            - Unaligned mask of bits to setting the
**                           inactive level. Each port pin has
**                           corresponding bit in the mask. Bit value 0
**                           means not selected bit, bit value 1 means
**                           selected bit. The bit 0 corresponds with
**                           the pin which has index 0 within the port,
**                           the bit 1 corresponds with the pin which
**                           has index 1 within the port, etc. Only
**                           configured pins (through all of bit fields
**                           in this component) are affected.
*/
/* ===================================================================*/
void GPIO_ClearPortBits(LDD_TDeviceData *DeviceDataPtr, GPIO_BASE_Type GpioType, GPIO_TPortValue Mask);

/*
** ===================================================================
**     Method      :  GPIO_SetPortBits (component GPIO_LDD)
*/
/*!
**     @brief
**         This method drives the specified bits of the port to the
**         active level. Only configured pins (through all of bit
**         fields in this component) are affected.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         GpioType        - GPIO type
**                           ex:GPIOA type,GPIOB type
**     @param
**         Mask            - Unaligned mask of bits to setting the
**                           active level. Each port pin has
**                           corresponding bit in the mask. Bit value 0
**                           means not selected bit, bit value 1 means
**                           selected bit. The bit 0 corresponds with
**                           the pin which has index 0 within the port,
**                           the bit 1 corresponds with the pin which
**                           has index 1 within the port, etc. Only
**                           configured pins (through all of bit fields
**                           in this component) are affected.
*/
/* ===================================================================*/
void GPIO_SetPortBits(LDD_TDeviceData *DeviceDataPtr, GPIO_BASE_Type GpioType, GPIO_TPortValue Mask);

/*
** ===================================================================
**     Method      :  GPIO_TogglePortBits (component GPIO_LDD)
*/
/*!
**     @brief
**         This method inverts the specified bits of the port to
**         another level. Only configured pins (through all of bit
**         fields in this component) are affected.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         GpioType        - GPIO type
**                           ex:GPIOA type,GPIOB type
**     @param
**         Mask            - Unaligned mask of bits to inverting the
**                           current level. Each port pin has
**                           corresponding bit in the mask. Bit value 0
**                           means not selected bit, bit value 1 means
**                           selected bit. The bit 0 corresponds with
**                           the pin which has index 0 within the port,
**                           the bit 1 corresponds with the pin which
**                           has index 1 within the port, etc. Only
**                           configured pins (through all of bit fields
**                           in this component) are affected.
*/
/* ===================================================================*/
void GPIO_TogglePortBits(LDD_TDeviceData *DeviceDataPtr, GPIO_BASE_Type GpioType, GPIO_TPortValue Mask);

/*
** ===================================================================
**     Method      :  GPIO_SetPortInputDirection (component GPIO_LDD)
*/
/*!
**     @brief
**         This method sets the specified pins of the port to the input
**         direction. Only configured pins (through all of bit fields
**         in this component) are affected.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         GpioType        - GPIO type
**                           ex:GPIOA type,GPIOB type
**     @param
**         Mask            - Mask of bits to setting the input
**                           direction. Each port pin has corresponding
**                           bit in the mask. Bit value 0 means not
**                           selected bit, bit value 1 means selected
**                           bit. The bit 0 corresponds with the pin
**                           which has index 0 within the port, the bit
**                           1 corresponds with the pin which has index
**                           1 within the port, etc. Only configured
**                           pins (through all of bit fields in this
**                           component) are affected.
*/
/* ===================================================================*/
void GPIO_SetPortInputDirection(LDD_TDeviceData *DeviceDataPtr, GPIO_BASE_Type GpioType, GPIO_TPortValue Mask);

/*
** ===================================================================
**     Method      :  GPIO_SetPortOutputDirection (component GPIO_LDD)
*/
/*!
**     @brief
**         This method sets the specified pins of the port to the
**         output direction. The specified pins of the port will be
**         driven to specified states. Only configured pins (through
**         all of bit fields in this component) are affected.
**     @param
**         DeviceDataPtr   - Device data structure
**                           pointer returned by [Init] method.
**     @param
**         GpioType        - GPIO type
**                           ex:GPIOA type,GPIOB type
**     @param
**         Mask            - Mask of bits to setting the output
**                           direction. Each port pin has corresponding
**                           bit in the mask. Bit value 0 means not
**                           selected bit, bit value 1 means selected
**                           bit. The bit 0 corresponds with the pin
**                           which has index 0 within the port, the bit
**                           1 corresponds with the pin which has index
**                           1 within the port, etc. Only configured
**                           pins (through all of bit fields in this
**                           component) are affected.
**     @param
**         Value           - Unaligned port data value to appear on
**                           the specified port pins after they have
**                           been switched to the output direction.
*/
/* ===================================================================*/
void GPIO_SetPortOutputDirection(LDD_TDeviceData *DeviceDataPtr, GPIO_BASE_Type GpioType, GPIO_TPortValue Mask, GPIO_TPortValue Value);

/* END GPIO. */

#ifdef __cplusplus
}  /* extern "C" */
#endif 

#endif
/* ifndef __GPIO_H */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.5 [05.21]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
